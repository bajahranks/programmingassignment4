install.packages(ppfy)
install.packages(ppyr)
install.packages("ggplot2")
library(ggplot2)
library(crayon)
cat("... to highlight the " %+% red("search term") %+%
" in a block of text\n")
cat(yellow$bgMagenta$bold('Hello world!\n'))
install.packages("backports")
install.packages("KernSmooth")
library(KernSmooth)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "hsi.csv")
hsi = read.csv("hsi.csv")
strsplit(names(hsi), 'wgtp')
gdp = read.csv("gdp.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "gdp.csv")
gdp = read.csv("gdp.csv")
View(gdp)
clean_gdp = select(gdp, 1,2,4,5)
clean_gdp = clean_gdp[-c(1:4), ] # delete row 1 to 4
library(dplyr)
clean_gdp = select(gdp, 1,2,4,5)
clean_gdp = clean_gdp[-c(1:4), ] # delete row 1 to 4
View(clean_gdp)
strsplit(clean_gdp$X.3[1], ',')
paste0(strsplit(clean_gdp$X.3[1], ','))
as.numeric(gsub(",","",clean_gdp$X.3))
as.numeric(gsub(",","",clean_gdp$X.3[1:194]))
as.numeric(gsub(",","",clean_gdp$X.3[1:190]))
gdp_list = as.numeric(gsub(",","",clean_gdp$X.3[1:190]))
gdp_avg = mean(gdp_list)
grep("^United", clean_gdp$X.2)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "edu.csv")
edu = read.csv("edu.csv")
View(edu)
library(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
grep(^2012,sampleTimes)
grep("^2012",sampleTimes)
setwd("~/Courses/Data-Science/Getting-and-Cleaning-Data/run_analysis")
# Load train data sets
x_train = read.table("train/X_train.txt")
y_train = read.table("train/y_train.txt")
subject_train = read.table("train/subject_train.txt")
# Load test data sets
x_test = read.table("test/X_test.txt")
y_test = read.table("test/y_test.txt")
subject_test = read.table("test/subject_test.txt")
# Load train data sets
x_train = read.table("train/X_train.txt")
y_train = read.table("train/y_train.txt")
subject_train = read.table("train/subject_train.txt")
View(subject_train)
View(x_train)
View(y_train)
View(y_test)
View(y_train)
View(y_test)
View(subject_test)
View(subject_train)
# Merge test files
test = cbind(subject_test, y_test, x_test)
View(test)
# Merge train files
train = cbind(subject_train, y_train, y_test)
# Merge train files
train = cbind(subject_train, y_train, y_train)
# Merge train files
train = cbind(subject_train, y_train, x_train)
View(train)
View(x_test)
# Load feature variables
features = read.table("features.txt")
View(features)
names(features) = c("id", "variable")
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
x
strsplit(x, "e")
txt <- c("arm","foot","lefroo", "bafoobar")
grep("foo", txt)
txt = c("tBodyAcc-mean()-Z",
"tBodyAcc-std()-X",
"tBodyAcc-std()-Y")
grep("mean()", txt)
grep("std()", txt)
txt = c("tBodyAcc-mean()-Z",
"tBodyAcc-std()-X",
"tBodyAcc-std()-Y", "fBodyAccJerk-meanFreq()-X")
grep("mean()", txt)
grep("[mean()]", txt)
grep("mean\(\)", txt)
grep("mean/(/)", txt)
grep("[mean/(/)]", txt)
grepl("mean()", txt)
grep("mean()", txt, value = TRUE)
grep("mean()", txt, value = TRUE, fixed = TRUE)
# Mean variables
mean_var = grep("mean()", features$variable, value = TRUE, fixed = TRUE)
# Standard Deviation variables
std_var = grep("std()", features$variable, value = TRUE, fixed = TRUE)
View(test)
grep("mean()|std()", features$variable, value = TRUE, fixed = TRUE)
# Combine variable vectors
mean_std_var = c(mean_var, std_var)
names(test) = c("subject", "activity", features$variable)
names(train) = c("subject", "activity", features$variable)
library(dplyr)
new_test = select(test, 1,2,mean_std_var)
View(new_test)
new_train = select(train, 1,2,all_of(mean_std_var))
View(subject_test)
View(new_train)
# Replace activity number with a descriptive name
new_test$activity = "STANDING"
new_train$activity = "STANDING"
# Select numeric columns
new_test_num_col = new_test[, sapply(new_test, is.numeric)]
new_test_num_col = select(new_test_num_col, all_of(mean_std_var))
# Average of each variable
sub1_avgs = colMeans(new_test_num_col, na.rm = TRUE)
sub1_avgs
View(new_train)
View(y_test)
# Select the columns with mean and std. I also added
# the columns for the subject and the activity.
new_test = select(test, 1, 2, all_of(mean_std_var))
new_train = select(train, 1, 2, all_of(mean_std_var))
# Replace activity number with a descriptive name
# use a for loop here.
for (val in new_test$activity) {
if (val == 1) val = "WALKING"
if (val == 2) val = "WALKING_UPSTAIRS"
if (val == 3) val = "WALKING_DOWNSTAIRS"
if (val == 4) val = "SITTING"
if (val == 5) val = "STANDING"
if (val == 6) val = "LAYING"
}
for (val in new_test$activity) {
if (val == 1) {
count = count + 1
new_test$activity[count] = "WALKING"
} else if (val == 2) {
count = count + 1
new_test$activity[count] = "WALKING_UPSTAIRS"
} else if (val == 3) {
count = count + 1
new_test$activity[count] = "WALKING_DOWNSTAIRS"
} else if (val == 4) {
count = count + 1
new_test$activity[count] = "SITTING"
} else if (val == 5) {
count = count + 1
new_test$activity[count] = "STANDING"
} else if (val == 6) {
count = count + 1
new_test$activity[count] = "LAYING"
}
}
# Replace activity number with a descriptive name
# use a for loop here.
count = 0
for (val in new_test$activity) {
if (val == 1) {
count = count + 1
new_test$activity[count] = "WALKING"
} else if (val == 2) {
count = count + 1
new_test$activity[count] = "WALKING_UPSTAIRS"
} else if (val == 3) {
count = count + 1
new_test$activity[count] = "WALKING_DOWNSTAIRS"
} else if (val == 4) {
count = count + 1
new_test$activity[count] = "SITTING"
} else if (val == 5) {
count = count + 1
new_test$activity[count] = "STANDING"
} else if (val == 6) {
count = count + 1
new_test$activity[count] = "LAYING"
}
}
# Merge both files
test_train = rbind(test, train)
names(test_train) = c("subject", "activity", features$variable)
View(test_train)
new_test_train = select(test_train, 1, 2, all_of(mean_std_var))
# Replace activity number with a descriptive name
# use a for loop here.
count = 0
for (val in new_test_train$activity) {
if (val == 1) {
count = count + 1
new_test_train$activity[count] = "WALKING"
} else if (val == 2) {
count = count + 1
new_test_train$activity[count] = "WALKING_UPSTAIRS"
} else if (val == 3) {
count = count + 1
new_test_train$activity[count] = "WALKING_DOWNSTAIRS"
} else if (val == 4) {
count = count + 1
new_test_train$activity[count] = "SITTING"
} else if (val == 5) {
count = count + 1
new_test_train$activity[count] = "STANDING"
} else if (val == 6) {
count = count + 1
new_test_train$activity[count] = "LAYING"
}
}
View(new_test_train)
# Select numeric columns
new_test_train_num_col = new_test_train[, sapply(new_test, is.numeric)]
new_test_train_num_col = select(new_test_train_num_col, all_of(mean_std_var))
# Averages
data_groups = group_by(new_test_train, subject, activity)
summarize(data_groups)
View(data_groups)
# Select numeric columns
new_test_train_num_col = new_test_train[, sapply(new_test, is.numeric)]
new_test_train_num_col = select(new_test_train_num_col, all_of(mean_std_var))
summarize(data_groups, colMeans(new_test_train_num_col)
xz
summarize(data_groups, colMeans(new_test_train_num_col)
z
summarize(data_groups, colMeans(new_test_train_num_col))
summarise_at(data_groups, colMeans(new_test_train_num_col))
summarise_at(data_groups, colMeans())
summarise_all(data_groups, colMeans())
summarise_all(data_groups, colMeans(new_test_train_num_col))
summarise_at(data_groups, mean_std_var, colMeans(new_test_train_num_col))
summarise_at(data_groups, mean_std_var, colMeans())
summarise_at(data_groups, mean_std_var, mean())
summarise_at(data_groups, mean_std_var, mean(mean_std_var))
summarise_at(data_groups, mean_std_var, mean(new_test_train_num_col))
summarise_at(data_groups, vars(mean_std_var), mean(new_test_train_num_col))
summarise_at(data_groups, vars(mean_std_var), colMeans(new_test_train_num_col))
starwars
summarise_at(data_groups, mean_std_var, mean)
tidy_test_train = summarise_at(data_groups, mean_std_var, mean)
View(tidy_test_train)
